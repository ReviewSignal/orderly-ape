apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "orderly-ape.fullname" . }}
  labels:
    {{- include "orderly-ape.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  {{- if .Values.persistence.enabled }}
  strategy:
    type: Recreate
  {{- end }}
  selector:
    matchLabels:
      {{- include "orderly-ape.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        config/checksum: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "orderly-ape.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "orderly-ape.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: {{ .Chart.Name }}-init
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "sh"
            - "-c"
            - |
              ./manage.py migrate --noinput

              cat <<EOF | python ./manage.py shell
              import environ
              import sys

              # Create the superuser
              from django.contrib.auth import get_user_model
              from django.contrib.auth.models import Group
              User = get_user_model()

              env = environ.FileAwareEnv(DEBUG=(bool, False))
              admin_user = env.str("INITIAL_ADMIN_USER", default="")
              admin_password = env.str("INITIAL_ADMIN_PASSWORD", default="")

              admin_exists = User.objects.filter(username=admin_user).exists()
              if not admin_exists:
                  User.objects.create_superuser(
                    admin_user,
                    f"{admin_user}@example.com",
                    admin_password,
                  )
                  print(f"Created initial superuser '{admin_user}'", file=sys.stderr)

              # Setup default test output
              from loadtest.models import TestOutputConfig

              influxdb_url = env.str("INFLUXDB_URL", default="http://localhost:8086")
              influxdb_token = env.str("INFLUXDB_TOKEN", default="")
              influxdb_org = env.str("INFLUXDB_ORG", default="default")
              influxdb_bucket = env.str("INFLUXDB_BUCKET", default="default")
              influxdb_tls_skip_verify = env.bool("INFLUXDB_TLS_SKIP_VERIFY", default=False)

              if influxdb_token:
                  output, _ = TestOutputConfig.objects.get_or_create(name="default")
                  if not output.influxdb_url:
                    output.influxdb_url=influxdb_url
                    output.influxdb_token=influxdb_token
                    output.influxdb_org=influxdb_org
                    output.influxdb_bucket=influxdb_bucket
                    output.insecure_skip_verify=influxdb_tls_skip_verify
                    output.save()

                    print(f"Created 'default' test output with '{influxdb_url}' influxdb url.", file=sys.stderr)

              # Setup default worker
              from loadtest.models import TestLocation

              worker_initial_password = env.str("INITIAL_WORKER_PASSWORD", default="")
              if worker_initial_password:
                  user, created = User.objects.get_or_create(username="worker-local")
                  if created:
                    user.set_password(worker_initial_password)
                    group = Group.objects.get(name='Worker')
                    user.groups.add(group)
                    user.save()

                    print(f"Created 'worker-local' user and assigned to 'Worker' group.", file=sys.stderr)

                  location, created = TestLocation.objects.get_or_create(name="local")
                  if created:
                    location.display_name = "Cluster Local Worker"
                    location.save()
                    print(f"Created 'local' test location.", file=sys.stderr)
              EOF
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- with .Values.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if not ( include "orderly-ape.hasEnvVar" (list "INITIAL_ADMIN_PASSWORD" .) ) }}
            - name: INITIAL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "orderly-ape.fullname" . }}
                  key: admin-password
            {{- end }}
            {{- if not ( include "orderly-ape.hasEnvVar" (list "INITIAL_ADMIN_USER" .) ) }}
            - name: INITIAL_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "orderly-ape.fullname" . }}
                  key: admin-user
            {{- end }}
            {{- if not ( include "orderly-ape.hasEnvVar" (list "ALLOWED_HOSTS" .) ) }}
            - name: ALLOWED_HOSTS
              value: localhost,127.0.0.1,$(MY_POD_IP){{ if .Values.ingress.enabled }}{{ range .Values.ingress.hosts }}{{ print "," .host }}{{ end }}{{ end }}
            {{- end }}
            {{- if and .Values.ingress.enabled .Values.ingress.tls }}
            {{- if not ( include "orderly-ape.hasEnvVar" (list "CSRF_TRUSTED_ORIGINS" .) ) }}
            - name: CSRF_TRUSTED_ORIGINS
              value: http://127.0.0.1{{ range .Values.ingress.hosts }}{{ print ",https://" .host }}{{ end }}
            {{- end }}
            {{- end }}
            {{- if not ( include "orderly-ape.hasEnvVar" (list "DATABASE_URL" .) ) }}
            - name: DATABASE_URL
              value: "sqlite:////data/db.sqlite3"
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: data
          {{- if .Values.secret }}
            - mountPath: /run/secrets
              name: secrets
              secret:
                secretName: {{ include "orderly-ape.fullname" . }}
          {{- end }}
          {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- with .Values.env }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- if not ( include "orderly-ape.hasEnvVar" (list "ALLOWED_HOSTS" .) ) }}
            - name: ALLOWED_HOSTS
              value: localhost,127.0.0.1,$(MY_POD_IP){{ if .Values.ingress.enabled }}{{ range .Values.ingress.hosts }}{{ print "," .host }}{{ end }}{{ end }}
            {{- end }}
            {{- if and .Values.ingress.enabled .Values.ingress.tls }}
            {{- if not ( include "orderly-ape.hasEnvVar" (list "CSRF_TRUSTED_ORIGINS" .) ) }}
            - name: CSRF_TRUSTED_ORIGINS
              value: http://127.0.0.1{{ range .Values.ingress.hosts }}{{ print ",https://" .host }}{{ end }}
            {{- end }}
            {{- end }}
            {{- if not ( include "orderly-ape.hasEnvVar" (list "DATABASE_URL" .) ) }}
            - name: DATABASE_URL
              value: "sqlite:////data/db.sqlite3"
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /data
              name: data
          {{- if .Values.secret }}
            - mountPath: /run/secrets
              name: secrets
              secret:
                secretName: {{ include "orderly-ape.fullname" . }}
          {{- end }}
          {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "orderly-ape.fullname" .) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- if .Values.secret }}
        - name: secrets
          secret:
            secretName: {{ include "orderly-ape.fullname" . }}
      {{- end }}
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
